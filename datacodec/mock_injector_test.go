// Code generated by mockery 2.9.4. DO NOT EDIT.

package datacodec

import (
	datatype "github.com/datastax/go-cassandra-native-protocol/datatype"
	mock "github.com/stretchr/testify/mock"
)

// mockInjector is an autogenerated mock type for the injector type
type mockInjector struct {
	mock.Mock
}

// ensureSize provides a mock function with given fields: size
func (_m *mockInjector) ensureSize(size int) {
	_m.Called(size)
}

// setElem provides a mock function with given fields: index, key, value, keyWasNull, valueWasNull, keyDataType, valueDataType
func (_m *mockInjector) setElem(index int, key interface{}, value interface{}, keyWasNull bool, valueWasNull bool, keyDataType datatype.DataType, valueDataType datatype.DataType) error {
	ret := _m.Called(index, key, value, keyWasNull, valueWasNull, keyDataType, valueDataType)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, interface{}, interface{}, bool, bool, datatype.DataType, datatype.DataType) error); ok {
		r0 = rf(index, key, value, keyWasNull, valueWasNull, keyDataType, valueDataType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// zeroElem provides a mock function with given fields: index, key, dataType
func (_m *mockInjector) zeroElem(index int, key interface{}, dataType datatype.DataType) (interface{}, error) {
	ret := _m.Called(index, key, dataType)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int, interface{}, datatype.DataType) interface{}); ok {
		r0 = rf(index, key, dataType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, interface{}, datatype.DataType) error); ok {
		r1 = rf(index, key, dataType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
